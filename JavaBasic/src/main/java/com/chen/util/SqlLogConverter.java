package com.chen.util;

import java.util.Arrays;
import java.util.List;

/**
 * 将控制台打印的不带参SQL和Parameters参数拼接成SQL
 *
 * 刚开始我想用Map存放键值对，但是能保证有序的LinkedHashMap和TreeMap的key无法重复，
 * 而key允许重复的IdentityHashMap又是无序的
 */
public class SqlLogConverter {

    private String generateSqlLog(String param,String sql){
        List<String> vtList = Arrays.asList(param.split(","));
        for(String vt : vtList){
            String type = vt.substring(vt.indexOf("(")+1,vt.indexOf(")")).trim();
            String value = vt.replaceAll("\\([^0]*\\)","").trim();
            if (type.equals("String")){
                sql = sql.replaceFirst("\\?","\'"+value+"\'");
            }else if (type.equals("Integer") || type.equals("Long")){
                sql = sql.replaceFirst("\\?",value);
            }
        }
        return sql;
    }

    public static void main(String[] args) {
        String param = "8640000(Integer), 8640100(Integer), 8640000(Integer), 8640100(Integer), 2018-02-1400:00:00(String), 2018-07-2423:59:59(String), 8640000(Integer), 8640100(Integer), 2018-02-1400:00:00(String), 2018-07-2423:59:59(String), 20(Integer), 0(Integer)";
        String sql = "select * from ( select tmp_page.*, rownum row_id from ( WITH CV AS ( SELECT CHANNEL_ID,T.PROVINCE_COMMON_REGION_NAME AS \"PROVINCE_NAME\" , T.CITY_COMMON_REGION_NAME AS \"CITY_NAME\" ,PROVINCE_COMMON_REGION_ID,CITY_COMMON_REGION_ID,CHANNEL_CLASS ,T.CHANNEL_NAME AS \"RETAIL_SHOP_NAME\" , T.SUB_SHANG_COUNT AS \"SON_BIZMAN_COUNT\" , T.CHANNEL_NBR , T.STORAGE_ID , T.CHANNEL_TYPE_NAME AS \"CHANNEL_TYPE\" , T.DIAN_SHOP_TYPE , T.BUSINESS_LEVEL , T.BOUTIQUE_SHOP_TYPE FROM SHOPOM.CHANNEL_VIEW T WHERE 1=1 AND T.MARK_FLAG = 'Y' AND ? = T.PROVINCE_COMMON_REGION_ID AND ? = T.CITY_COMMON_REGION_ID ), ILL AS (SELECT R.*, ROW_NUMBER() OVER(PARTITION BY R.INST_CODE,R.CHANNEL_ID,R.OPERATE_TYPE ORDER BY R.OPERATE_DATE DESC) AS TIME_RANK FROM SHOPOM.INST_LIFE R WHERE 1=1 AND R.REPEAL_FLAG = 'N' AND R.OPERATE_TYPE NOT IN ('SELL_ORDER_XSY', 'SELL_ORDER_XSL', 'SELL','SELL_ORDER_XSY_REFUND','REFUND') AND ? = R.PROVINCE_COMMON_REGION_ID AND ? = R.CITY_COMMON_REGION_ID AND R.OPERATE_DATE >= TO_DATE(?,'yyyy-mm-dd hh24:mi:ss') AND R.OPERATE_DATE <= TO_DATE(?,'yyyy-mm-dd hh24:mi:ss') ), IL_TOTAL AS (SELECT R.*, 1 AS TIME_RANK FROM SHOPOM.INST_LIFE R WHERE 1 = 1 AND R.REPEAL_FLAG = 'N' AND R.OPERATE_TYPE IN ('SELL_ORDER_XSY', 'SELL_ORDER_XSL', 'SELL', 'REFUND') AND ? = PROVINCE_COMMON_REGION_ID AND ? = CITY_COMMON_REGION_ID AND R.OPERATE_DATE >= TO_DATE(?,'yyyy-mm-dd hh24:mi:ss') AND R.OPERATE_DATE <= TO_DATE(?,'yyyy-mm-dd hh24:mi:ss') ), IL AS( (SELECT ILL.*,'Y' AS \"CODE_UNIQUE\" FROM ILL WHERE TO_NUMBER(ILL.TIME_RANK) =1) UNION ALL (SELECT IL_TOTAL.*,'N' AS \"CODE_UNIQUE\" FROM IL_TOTAL) ), D AS ( SELECT IL.BRAND_CD, IL.OFFER_MODEL_ID, SUM(CASE WHEN (IL.OPERATE_TYPE IN ('IN','ALLOT_IN') AND IL.CODE_UNIQUE = 'Y') THEN 1 ELSE 0 END) AS \"IN_STOCK_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE IN ('IN','ALLOT_IN') AND IL.CODE_UNIQUE = 'Y') THEN IL.OPERATE_AMOUNT ELSE 0 END) AS \"IN_STOCK_AMOUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE IN ('OUT','ALLOT_OUT') AND IL.CODE_UNIQUE = 'Y') THEN 1 ELSE 0 END) AS \"OUT_STOCK_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE IN ('OUT','ALLOT_OUT') AND IL.CODE_UNIQUE = 'Y') THEN IL.OPERATE_AMOUNT ELSE 0 END) AS \"OUT_STOCK_AMOUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN 1 ELSE 0 END) AS \"ALL_SALE_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL') AND IL.CODE_UNIQUE = 'N') THEN 1 ELSE 0 END) AS \"CONTRACT_SALE_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'SELL' AND IL.CODE_UNIQUE = 'N') THEN 1 ELSE 0 END) AS \"TERMINAL_SALE_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'ALLOT_IN' AND IL.CODE_UNIQUE = 'Y') THEN 1 ELSE 0 END) AS \"ALLOT_IN_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'ALLOT_IN' AND IL.CODE_UNIQUE = 'Y') THEN IL.OPERATE_AMOUNT ELSE 0 END) AS \"ALLOT_IN_AMOUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'ALLOT_OUT' AND IL.CODE_UNIQUE = 'Y') THEN 1 ELSE 0 END) AS \"ALLOT_OUT_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'ALLOT_OUT' AND IL.CODE_UNIQUE = 'Y') THEN IL.OPERATE_AMOUNT ELSE 0 END) AS \"ALLOT_OUT_AMOUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'REFUND' AND IL.CODE_UNIQUE = 'N') THEN 1 ELSE 0 END) AS \"SALE_OUT_COUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'REFUND' AND IL.CODE_UNIQUE = 'N') THEN ABS(IL.OPERATE_AMOUNT) ELSE 0 END) AS \"SALE_OUT_AMOUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN IL.OPERATE_AMOUNT ELSE 0 END) AS \"ALL_SALE_AMOUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL') AND IL.CODE_UNIQUE = 'N') THEN IL.OPERATE_AMOUNT ELSE 0 END) AS \"CONTRACT_SALE_AMOUNT\", SUM(CASE WHEN (IL.OPERATE_TYPE = 'SELL' AND IL.CODE_UNIQUE = 'N') THEN IL.OPERATE_AMOUNT ELSE 0 END) AS \"TERMINAL_SALE_AMOUNT\", to_char(DECODE(SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN 1 ELSE 0 END), 0, 0, NULL, 0, ROUND((SUM(CASE WHEN (IL.IS_CENTMAN = 'Y' AND IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN 1 ELSE 0 END) / SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN 1 ELSE 0 END))*100,2) ),'fm99990.0999')||'%' AS \"CENT_ALL_SALE_COUNT_RATE\", to_char(DECODE(SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN IL.OPERATE_AMOUNT ELSE 0 END), 0, 0, NULL, 0, ROUND((SUM(CASE WHEN (IL.IS_CENTMAN = 'Y' AND IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN IL.OPERATE_AMOUNT ELSE 0 END) / SUM(CASE WHEN (IL.OPERATE_TYPE IN ('SELL_ORDER_XSY','SELL_ORDER_XSL','SELL') AND IL.CODE_UNIQUE = 'N') THEN IL.OPERATE_AMOUNT ELSE 0 END))*100, 2) ),'fm99990.0999')||'%' AS \"CENT_ALL_SALE_AMOUNT_RATE\" FROM IL,CV WHERE 1=1 AND IL.CHANNEL_ID = CV.CHANNEL_ID GROUP BY IL.BRAND_CD, IL.OFFER_MODEL_ID ) ,D2 AS ( SELECT T3.BRAND_CD, T4.OFFER_MODEL_ID, SUM(CASE WHEN (T1.STATUS_CD='1000') THEN 1 ELSE 0 END) AS \"NOW_STOCK_COUNT\", SUM(CASE WHEN (T1.STATUS_CD= '1000') THEN T1.COST_PRICE ELSE 0 END) AS \"NOW_STOCK_AMOUNT\" FROM SHOPOM.STOCK_INST T1,SHOPOM.OFFER T2,SHOPOM.OFFER_BRAND T3,SHOPOM.OFFER_MODEL T4,CV WHERE T1.OFFER_ID = T2.OFFER_ID AND T2.CATEGORY_CD in ('1','3') AND T2.BRAND_CD = T3.BRAND_CD AND T2.OFFER_MODEL_ID = T4.OFFER_MODEL_ID AND CV.STORAGE_ID = T1.STORAGE_ID GROUP BY T3.BRAND_CD, T4.OFFER_MODEL_ID ) ,D3 AS ( SELECT D.BRAND_CD, D.OFFER_MODEL_ID FROM D UNION SELECT D2.BRAND_CD, D2.OFFER_MODEL_ID FROM D2 ) SELECT * FROM ( SELECT (CASE T3.BRAND_NAME WHEN '华为' THEN 7 WHEN 'OPPO' THEN 6 WHEN 'vivo' THEN 5 WHEN '苹果' THEN 4 WHEN '三星' THEN 3 WHEN '小米' THEN 2 ELSE 1 END) AS \"WEIGHT\",T3.BRAND_NAME, T4.OFFER_MODEL_NAME, D.IN_STOCK_COUNT,D.IN_STOCK_AMOUNT,D.OUT_STOCK_COUNT, D.OUT_STOCK_AMOUNT, D.ALL_SALE_COUNT,D.CONTRACT_SALE_COUNT, D.TERMINAL_SALE_COUNT, D.ALLOT_IN_COUNT, D.ALLOT_IN_AMOUNT,D.ALLOT_OUT_COUNT, D.ALLOT_OUT_AMOUNT,D.SALE_OUT_COUNT,D.SALE_OUT_AMOUNT, D.ALL_SALE_AMOUNT,D.CONTRACT_SALE_AMOUNT,D.TERMINAL_SALE_AMOUNT,D.CENT_ALL_SALE_COUNT_RATE, D.CENT_ALL_SALE_AMOUNT_RATE, D2.NOW_STOCK_COUNT,D2.NOW_STOCK_AMOUNT FROM D, D2, D3, SHOPOM.OFFER_BRAND T3, SHOPOM.OFFER_MODEL T4 WHERE D3.offer_model_id = D.offer_model_id(+) AND D3.BRAND_CD = D.BRAND_CD(+) AND D3.offer_model_id = D2.offer_model_id(+) AND D3.BRAND_CD = D2.BRAND_CD(+) AND D3.BRAND_CD = T3.BRAND_CD AND D3.OFFER_MODEL_ID = T4.OFFER_MODEL_ID ) order by WEIGHT DESC,BRAND_NAME,OFFER_MODEL_NAME ) tmp_page where rownum <= ? ) where row_id > ?";

        SqlLogConverter sqlLogConverter = new SqlLogConverter();
        String resultSql = sqlLogConverter.generateSqlLog(param,sql);
        System.out.println(resultSql);
    }
}
